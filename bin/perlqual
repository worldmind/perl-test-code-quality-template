#!/usr/bin/perl -w

use strict;

use Cwd;
use File::Find::Rule;
use File::Find::Rule::Perl;
use Path::Tiny;
use YAML;
use File::HomeDir;
use File::Spec;

use Test::More;

chdir $ARGV[0] if $ARGV[0];
my $current_dir = getcwd;
my %c           = %{ get_config($current_dir) };

my @perl_files = File::Find::Rule->perl_file->in($current_dir);

my $test_name = "Check that test cover more than $c{coverage}{min_coverage}\% of code";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{coverage}{enabled};
    eval 'use Test::Strict';    ## no critic
    # shut up warnings from Devel::Cover
    $ENV{DEVEL_COVER_OPTIONS} = '-silent,1';
    all_cover_ok( $c{coverage}{min_coverage}, $c{coverage}{unit_tests_dir} );
};

$test_name = "Check complexity metrics";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{metrics}{enabled};
    eval 'use Perl::Metrics::Simple';    ## no critic
    check_complexity(
        \@perl_files,
        $c{metrics}{max_complexity},
        $c{metrics}{max_lines_in_sub},
    );
};

$test_name = "Check for Best Practice by Critic and others";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{best_practice}{enabled};
    subtest $test_name => sub {
        eval 'use Test::Perl::Critic';    ## no critic
        critic_ok($_) for @perl_files;
    };
    $test_name = "Chek use warnings";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{best_practice}{check_use_warnings};
        eval 'use Test::Strict';          ## no critic
        no warnings 'once';
        $Test::Strict::TEST_WARNINGS = 1;
        all_perl_files_ok($current_dir);
    };
    $test_name = "Check no die() used";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{best_practice}{check_no_die_used};
        eval 'use PPI';                   ## no critic
        no_die_ok($_) for @perl_files;
    };
    $test_name = "Check file names portability";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{best_practice}{check_portability};
        eval "use Test::Portability::Files";    ## no critic
        options( all_tests => $c{best_practice}{portability_hyper_strict} );
        run_tests();
    };
};

$test_name = "Check code style";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{code_style}{enabled};
    subtest $test_name => sub {
        eval 'use Test::PerlTidy';              ## no critic
        run_tests();
    };
    $test_name = "Check EOL";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{code_style}{check_eol};
        eval 'use Test::EOL';                   ## no critic
        all_perl_files_ok( { trailing_whitespace => 1 }, $current_dir );
    };
    $test_name = "Check no tabs";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{code_style}{check_notabs};
        eval 'use Test::NoTabs';                ## no critic
        all_perl_files_ok($current_dir);
    };
};

$test_name = "Check forgotten things";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{forgotten}{enabled};
    $test_name = "Check no FIXME";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{forgotten}{check_nofixme};
        eval 'use Test::Fixme';    ## no critic
        run_tests();
    };
    $test_name = "Check no breakpoints";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{forgotten}{check_nobreakpoints};
        eval "use Test::NoBreakpoints";    ## no critic
        all_files_no_breakpoints_ok();
    };
    $test_name = "Check that DELMEAFTER not expired";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{forgotten}{check_delmeafter};
        eval "use DateTime::Format::ISO8601";    ## no critic
        delmeafter_ok($_) for @perl_files;
    };
};

$test_name = "Check distro";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{distro}{enabled};
    eval "use Test::Kwalitee 'kwalitee_ok'";     ## no critic
    kwalitee_ok();
};

$test_name = "Check POD";
subtest $test_name => sub {
    plan( skip_all => "$test_name test is disabled by config" ) unless $c{pod}{enabled};
    subtest $test_name => sub {
        eval 'use Test::Pod';                    ## no critic
        all_pod_files_ok($current_dir);
    };
    $test_name = "Check POD coverage";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{pod}{check_coverage};
        {                                        ## no critic
            eval '
				use Test::Pod::Coverage;
				use Pod::Coverage;
		';
        }
        all_pod_coverage_ok($current_dir);
    };
    $test_name = "Check POD spelling";
    subtest $test_name => sub {
        plan( skip_all => "$test_name test is disabled by config" ) unless $c{pod}{check_spelling};
        eval 'use Test::Spelling';    ## no critic
        all_pod_files_spelling_ok($current_dir);
    };
};

done_testing();

sub delmeafter_ok {
    my ($file_name)  = @_;
    my $file_content = path($file_name)->slurp_utf8;
    my $result       = 1;
    while ( $file_content =~ m{DELMEAFTER\s+(\S+)\s}g ) {
        my $delmedate = DateTime::Format::ISO8601->parse_datetime($1);
        $result = 0 if $delmedate le DateTime->now();
    }
    ok( $result, "DELMEAFTER not expired $file_name" );
}

sub is_die_or_warn {
    my ( undef, $node ) = @_;
    if ( $node->isa('PPI::Token::Word')
        and ( $node->content eq 'die' or $node->content eq 'warn' ) )
    {
        return 1;
    }
    return 0;
}

sub no_die_ok {
    my ($file_name) = @_;
    my $ppi_doc     = PPI::Document->new($file_name);
    my $nodes       = $ppi_doc->find( \&is_die_or_warn );
    my $count = $nodes ? scalar @{$nodes} : 0;
    is( $count, 0, "$file_name does not use die or warn" ) or diag explain $nodes;
}

sub check_complexity {
    my ( $perl_files, $max_complexity, $max_lines_in_sub ) = @_;
    my $analzyer = Perl::Metrics::Simple->new;
    my @subs;

    for (@$perl_files) {
        my $analysis = $analzyer->analyze_files($_);
        push( @subs, $_ ) for ( @{ $analysis->subs } );
    }

    plan tests => ( scalar @subs ) * 2;

    foreach my $sub (@subs) {
        my $name       = $sub->{name};
        my $complexity = $sub->{mccabe_complexity};
        my $lines      = $sub->{lines};

        ok( $complexity <= $max_complexity,
            "Cyclomatic complexity $complexity for sub $name is < $max_complexity"
        ) or diag $sub->{path};
        ok( $lines <= $max_lines_in_sub,
            "Lines count $lines for sub $name < $max_lines_in_sub"
        ) or diag $sub->{path};
    }
}

sub get_config {
    my ($current_dir) = @_;
    my $home_dir = File::HomeDir->my_home;

    my $local_config_path = File::Spec->catfile( $current_dir, '.perlqual' );
    my $user_config_path  = File::Spec->catfile( $home_dir,    '.perlqual' );

    my $raw_config;
    if ( -e $local_config_path ) {
        $raw_config = path($local_config_path)->slurp;
    }
    elsif ( -e $user_config_path ) {
        $raw_config = path($user_config_path)->slurp;
    }
    else {
        $raw_config = do { local $/; <DATA> };
    }

    return Load($raw_config);
}

__DATA__
coverage:
    enabled: 1
    min_coverage: 70
    unit_tests_dir: './t'
metrics:
    enabled: 1
    max_complexity: 20
    max_lines_in_sub: 40
best_practice:
    enabled: 1
    check_use_warnings: 1
    check_no_die_used: 0
    check_portability: 0
    portability_hyper_strict: 0
code_style:
    enabled: 1
    check_eol: 1
    check_notabs: 0
forgotten:
    enabled: 1
    check_nofixme: 1
    check_nobreakpoints: 1
    check_delmeafter: 1
distro:
    enabled: 1
pod:
    enabled: 1
    check_coverage: 1
    check_spelling: 0
